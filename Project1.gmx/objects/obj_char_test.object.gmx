<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>char_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 22;
movespeed = 8;
jump = 0;
jump_max = 2;
mode = 0;
img_spd = 0.1;
hp = 100;
xpos = 0;
ypos = 0;
atk = 10;
bomb = 2;
bomb_stack = 0;
time = 0;
kill = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Key input &amp; Mode Chanage
//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_up = -keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
key_act = keyboard_check_pressed(ord("Z"));
key_change = keyboard_check_pressed(ord("X"));
xpos = x;
ypos = y;

//Change Mode
if (key_change)
{
    if (mode == 0)
    {
        sprite_index = char_atk;
        mode = 1;
        vsp = 0;
        x = 896;
        y = 656;
    }
    else
    {
        sprite_index = char_run;
        mode = 0;
        vsp = 0;
        x = 128;
        y = 656;
    }   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movements


//Jump Mode
if (mode == 0)
{
    //React to inputs
    /*move = key_left + key_right;
    hsp = move * movespeed; */
    if (vsp &lt; 10) vsp += grav;
    
    if (place_meeting(x,y+1,block_floor))
    {
        jump = jump_max ;
    }
    
    if (key_act) &amp;&amp; (jump&gt;0)
    {

        jump -= 1;
        vsp = -jumpspeed;
    }
    
    /* Bind Horizontal Move
    //horizontal collision
    if (place_meeting(x+hsp,y,block_floor))
    {
        while(!place_meeting(x+sign(hsp),y,block_floor))
        {
            x += sign(hsp);
        }
        hsp = 0;
    }
    x += hsp;
    */
    
    //vertical collision
    if (place_meeting(x,y+vsp,block_floor))
    {
        while(!place_meeting(x,y+sign(vsp),block_floor))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
}

//Attack Mode
if (mode == 1)
{
    move = key_up + key_down;
    vsp = move * movespeed;
    
    if (image_speed &gt; 0) {
        if (image_index &gt; image_number - 1) sprite_index = char_atk;
    }
    
    if(key_act &amp;&amp; bomb&gt;0)
    {
        sprite_index = char_atk_motion;
        image_speed = img_spd;
        //bomb -=1;
    }
        
    // Hitbox
    if (image_index &gt;= 1) &amp;&amp; (image_index &lt;= 3)
    {
        with (instance_create(x, y, obj_hitbox))
        {
            image_xscale = other.image_xscale;
                
            with (instance_place(x, y, par_enemy))
            {
                if (hit = 0)
                {
                    hit = 1;
                }
            }
        }
    }
    

    //vertical collision
    if (place_meeting(x,y+vsp,block_floor))
    {
        while(!place_meeting(x,y+sign(vsp),block_floor))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
}

//Bomb
if (bomb_stack == 8)
{
    bomb +=1;
    bomb_stack=0;
}
if (bomb == 5)
{
    bomb = 5;
    bomb_stack = 0;
}
//HP
time += 1;
if (time==30)
{
        time = 0;
        //hp -= 1;
}
if (hp==0 || keyboard_check(ord("Q")))
{
    instance_destroy();
    room_goto(Gameover);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
