<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
ini_open("save.ini");
hp = ini_read_real("status","hp",50);
ini_close();

grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 22;
movespeed = 8;
jump = 0;
jump_max = 2;
mode = 0;
img_spd = 0.1;
atk_img_spd = 0.5;
//hp = 100;
xpos = 0;
ypos = 0;
atk = 10;
bomb = 3;
bomb_stack = 0;
time = 0;
kill = 0;

char_hit = 0;

is_dust = false;
is_air = false;
is_hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Key input &amp; Mode Chanage
//Get the player's input
//key_right = keyboard_check(vk_right);
//key_left = -keyboard_check(vk_left);
key_up = -keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
key_act = keyboard_check_pressed(vk_space);
key_change = keyboard_check_pressed(vk_right) or keyboard_check_pressed(vk_left);
xpos = x;
ypos = y;

//Change Mode
if (key_change)
{
    if (mode == 0)
    {
        sprite_index = spr_char_atk_walk;
        mode = 1;
        vsp = 0;
        x = 896;
        y = 640;
    }
    else
    {
        sprite_index = spr_char_run;
        mode = 0;
        vsp = 0;
        x = 160;
        y = 640;
    }   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movements


//Jump Mode
if (mode == 0)
{
    
    // initial hitbox error fix
    if (instance_exists(obj_hitbox))
    {
        with(instance_find(obj_hitbox, 0)) 
        {
            instance_destroy();
        }
    }
    
    if (char_hit &gt; 0)
    {
        sprite_index = spr_char_hit;
        image_speed = 0.1;
        char_hit = Approach(char_hit, 0, 0.02);
        is_hit = true;
    }
    
    if (char_hit == 0) &amp;&amp; (is_hit)
    {
        sprite_index = spr_char_run;
        image_speed = img_spd;
        is_hit = false;
    }  


    //React to inputs
    /*move = key_left + key_right;
    hsp = move * movespeed; */
    if (vsp &lt; 10) vsp += grav;
    
    if (place_meeting(x,y+1,block_floor2))
    {
        image_speed = img_spd;
        jump = jump_max;
        is_air = false;
    }
    
    if (key_act) &amp;&amp; (jump &gt; 0)
    {
        if (sprite_index != spr_char_hit) &amp;&amp; (char_hit == 0) &amp;&amp; (!is_hit)
        {
            image_index = 2;
            image_speed = 0;
        }

        repeat(choose(2,3)) instance_create(x,bbox_bottom,obj_dust);
        if(jump == 2) audio_play_sound(sfx_jump_1,3,false);
        if(jump == 1) audio_play_sound(sfx_jump_2,3,false);
        jump -= 1;
        vsp = -jumpspeed;
        is_air = true;
    }
    
    /* Bind Horizontal Move
    //horizontal collision
    if (place_meeting(x+hsp,y,block_floor))
    {
        while(!place_meeting(x+sign(hsp),y,block_floor))
        {
            x += sign(hsp);
        }
        hsp = 0;
    }
    x += hsp;
    */
    
    //vertical collision
    if (place_meeting(x,y+vsp,block_floor2))
    {
        while(!place_meeting(x,y+sign(vsp),block_floor2))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
}

//Attack Mode
if (mode == 1)
{
    move = key_up + key_down;
    vsp = move * movespeed;
    
    if (image_speed &gt; 0) {
        if (image_index &gt; image_number - 1) 
        {
            sprite_index = spr_char_atk_walk;
            image_speed = img_spd;
        }
    }
    
    if(key_act &amp;&amp; bomb&gt;0)
    {
        audio_play_sound(sfx_atk_1,1,false);
        sprite_index = spr_char_atk_fire;
        image_speed = atk_img_spd;
        bomb -=1;
        is_dust = false;
    }
    /*
    if (sprite_index == sprite51) &amp;&amp; (image_index &gt;= 5) &amp;&amp; (image_index &lt;= 8)
    {
        if (!is_dust)
        {
            repeat(choose(6,9)) instance_create(bbox_left, y + 10, obj_dust2);
            is_dust = true;
        }
        
    }
    */
    // Hitbox
    var hitbox = noone;
    if (sprite_index == spr_char_atk_fire) &amp;&amp; (image_index &gt;= 2) &amp;&amp; (image_index &lt;= 10)
    {   
        if (instance_number(obj_hitbox) == 0)
        {
            hitbox = instance_create(x, y, obj_hitbox)
        }
        with (hitbox)
        {
            image_xscale = other.image_xscale;
            enemy = instance_place(x, y, par_enemy);
            if (enemy) &amp;&amp; (!is_hit)
            {
                enemy.hit = true;
                is_hit = true;
            }
        }
    }
    else if (image_index &gt; 10)
    {
        if (instance_exists(obj_hitbox))
        {
            with(instance_find(obj_hitbox, 0)) 
            {
                instance_destroy();
            }
        }
    }


    //vertical collision
    if (place_meeting(x,y+vsp,block_floor))
    {
        while(!place_meeting(x,y+sign(vsp),block_floor))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
}

//Bomb
if (bomb_stack == 4)
{
    bomb +=1;
    bomb_stack=0;
}
if (bomb == 5)
{
    bomb = 5;
    bomb_stack = 0;
}
//HP
time += 1;
if (time==30)
{
        time = 0;
        hp -= 1;
}
//Gameover
if (hp==0){
    instance_destroy();
    room_goto(rm_gameover);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
